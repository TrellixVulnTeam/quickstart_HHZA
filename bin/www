#!/usr/bin/env node

var debug = require('debug')('quickstart:server');
var http = require('http');

/**
 * Setup for non-production servers
 */
if ((process.env.NODE_ENV || '').trim() !== 'production') {
    // Set environment
    require('dotenv').config();
    // Generate empty dirs (that are missing)
    require('./dir-sync').sync();
    // Start postgres database
    require('./pgctl').start();
}

/**
 * Get port from environment
 */
const port = normalizePort(process.env.PORT || '3000');

/**
 * Configure web application
 */
 var app = require('../app');
 //app.set(port); // Get port from environment and store in express

/**
 * Start http server
 */
var server = http.createServer(app);
server.listen(port);

/**
 * Event listeners for http server
 */
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.\
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    // named pipe
    if (isNaN(port)) {
        return val;
    }

    // port number
    if (port >= 0) {
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
